package it.unical.videoteca.domain.facade;

import org.junit.jupiter.api.Test;
import it.unical.videoteca.domain.*;

public class VideotecaFacadeTest {

    @Test
    //per verificare se aggiunta, rimozione e ricerca (sia per id sia per genere) di un film funzionano correttamente
    void testAggiungiRimuovi() {
        VideotecaFacade facade = new VideotecaFacade();

        FilmDTO f1 = new FilmDTO("1", "Inception", "Christopher Nolan", 2010, "Fantascienza", 5.0, StatoVisione.VISTO);
        FilmDTO f2 = new FilmDTO("2", "Interstellar", "Christopher Nolan", 2014, "Fantascienza", 4.8, StatoVisione.DA_VEDERE);

        facade.aggiungiFilm(f1);
        facade.aggiungiFilm(f2);

        if (facade.listaFilm().size() != 2)
            throw new RuntimeException("Errore: non risultano due film aggiunti correttamente");

        if (facade.cercaPerId("1") == null)
            throw new RuntimeException("Errore: cercaPerId non restituisce il film atteso");

        if (facade.cercaPerGenere("Fantascienza").size() != 2)
            throw new RuntimeException("Errore: cercaPerGenere non restituisce entrambi i film");

        facade.rimuoviFilm("2");
        if (facade.listaFilm().size() != 1)
            throw new RuntimeException("Errore: il film non Ã¨ stato rimosso correttamente");

        System.out.println("VideotecaFacadeTest: aggiunta, rimozione e ricerca funzionano correttamente");
    }

    @Test
    //per verificare se un duplicato genera un errore (dovrebbe farlo) -> la facade deve bloccare i duplicati
    void testDuplicato() {
        VideotecaFacade facade = new VideotecaFacade();

        FilmDTO f1 = new FilmDTO("A1", "Dunkirk", "Christopher Nolan", 2017, "Guerra", 4.5, StatoVisione.VISTO);
        FilmDTO f2 = new FilmDTO("A2", "Dunkirk", "Christopher Nolan", 2017, "Guerra", 3.0, StatoVisione.DA_VEDERE);

        facade.aggiungiFilm(f1);

        try {
            facade.aggiungiFilm(f2);
            throw new RuntimeException("Errore: doveva essere lanciata un'eccezione per film duplicato");
        } catch (IllegalStateException e) {
            System.out.println("Eccezione correttamente lanciata per film duplicato");
        }
    }
}
