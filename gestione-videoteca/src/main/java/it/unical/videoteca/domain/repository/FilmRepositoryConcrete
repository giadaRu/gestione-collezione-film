package it.unical.videoteca.domain.repository;

import java.util.*;
import it.unical.videoteca.domain.model.Film;


public class FilmRepositoryConcrete implements FilmRepository {

    private final List<Film> archivio = new ArrayList<>();

    @Override
    public void save(Film film) {
        if (film == null)
            throw new IllegalArgumentException("Il film da salvare non può essere null");

        // Cerco un film con lo stesso id → aggiorna
        Film filmDaAggiornare = null;
        for (Film f : archivio) {
            if (f.getId().equals(film.getId())) {
                filmDaAggiornare = f;
                break;
            }
        }
        //Se esiste, rimuovo la versione vecchia, quindi sto aggiornando
        if (filmDaAggiornare != null) {
            archivio.remove(filmDaAggiornare);
        }

        //Altrimenti, aggiungo il nuovo film (nb: la validazione di unicità è gestita da aggiungiFilm in FilmService)
        archivio.add(film);
    }


    @Override
    public void delete(String id) {
        archivio.removeIf(f -> f.getId().equals(id));
    }

    @Override
    public Film findById(String id) {
        if (id == null || id.isBlank()) {
            return null;
        }
        for (Film f : archivio) {
            if (f.getId().equals(id)) {
                return f; 
            }
        }
        return null; 
    }

    @Override
    public List<Film> findAll() {
        return new ArrayList<>(archivio); // restituisce una copia

    }

    @Override
    public boolean exists(String titolo, String regista, int anno) {
        if (titolo == null || regista == null)
            return false;

        String titoloNorm = titolo.trim().toLowerCase();
        String registaNorm = regista.trim().toLowerCase();

        for (Film f : archivio) {
            String titoloFilm = f.getTitolo().trim().toLowerCase();
            String registaFilm = f.getRegista().trim().toLowerCase();

            if (titoloFilm.equals(titoloNorm) &&
                registaFilm.equals(registaNorm) &&
                f.getAnno() == anno) {
                return true; 
            }
        }
        return false; 
    }

    @Override
    public void clearAndSaveAll(List<Film> film) {
        this.archivio.clear(); //svuoto l'archivio corrente
        this.archivio.addAll(film); //aggiungo tutti i film dello stato precedente
    }

}
